library ieee;
use ieee.std_logic_1164.all;

entity tb_ASCENSOR_GENERAL is
end tb_ASCENSOR_GENERAL;

architecture tb of tb_ASCENSOR_GENERAL is

    component ASCENSOR_GENERAL
        port (clk            : in std_logic;
              reset_n        : in std_logic;
              p_actual       : in std_logic_vector (2 downto 0);
              p_solicitado   : in std_logic_vector (2 downto 0);
              s_presencia    : in std_logic;
              s_puerta       : in std_logic_vector (1 downto 0);
              aux            : out std_logic;
              motor_puertas  : out std_logic_vector (1 downto 0);
              motor_ascensor : out std_logic_vector (1 downto 0));
    end component;

    signal clk            : std_logic;
    signal reset_n        : std_logic;
    signal p_actual       : std_logic_vector (2 downto 0);
    signal p_solicitado   : std_logic_vector (2 downto 0);
    signal s_presencia    : std_logic;
    signal s_puerta       : std_logic_vector (1 downto 0);
    signal aux            : std_logic;
    signal motor_puertas  : std_logic_vector (1 downto 0);
    signal motor_ascensor : std_logic_vector (1 downto 0);

    constant TbPeriod : time := 1000 ns; -- EDIT Put right period here
    signal TbClock : std_logic := '0';
    signal TbSimEnded : std_logic := '0';

begin

    dut : ASCENSOR_GENERAL
    port map (clk            => clk,
              reset_n        => reset_n,
              p_actual       => p_actual,
              p_solicitado   => p_solicitado,
              s_presencia    => s_presencia,
              s_puerta       => s_puerta,
              aux            => aux,
              motor_puertas  => motor_puertas,
              motor_ascensor => motor_ascensor);

    -- Clock generation
    TbClock <= not TbClock after TbPeriod/2 when TbSimEnded /= '1' else '0';

    -- EDIT: Check that clk is really your main clock signal
    clk <= TbClock;

    stimuli : process
    begin
        -- EDIT Adapt initialization as needed
        p_actual <= (others => '0');
        p_solicitado <= (others => '0');
        s_presencia <= '0';
        s_puerta <= (others => '0');

        -- Reset generation
        -- EDIT: Check that reset_n is really your reset signal
        reset_n <= '1';
        wait for 100 ns;
        reset_n <= '0';
        wait for 100 ns;

        -- EDIT Add stimuli here
        wait for 100 * TbPeriod;

        -- Stop the clock and hence terminate the simulation
        TbSimEnded <= '1';
        wait;
    end process;

end tb;

-- Configuration block below is required by some simulators. Usually no need to edit.

configuration cfg_tb_ASCENSOR_GENERAL of tb_ASCENSOR_GENERAL is
    for tb
    end for;
end cfg_tb_ASCENSOR_GENERAL;
